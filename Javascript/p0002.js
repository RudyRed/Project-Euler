// Even Fibonacci numbers

// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose
// values do not exceed four million, find the sum of the even-valued terms.

// Space optimized 

function fibEvenSumBelow(max) {
  let sum = 2;
  let secondLastNum = 1;
  let lastNum = 2
  let num = 3;

  while (num < max) {
    if (num % 2 === 0) {
      sum += num;
    }
    secondLastNum = lastNum;
    lastNum = num;
    num = secondLastNum + lastNum;
  }
  return sum;
}

console.log(fibEvenSumBelow(4000000))

// Answer: 4613732

// Original Solution: Requires full sequence to be generated

// function fibonacciSequenceBelow(max) {
// const fibArr = [1];
// let newNum = 2
//   while(newNum < max) {
//     fibArr.push(newNum);
//     newNum = fibArr[fibArr.length - 1] + fibArr[fibArr.length - 2];
//   }
//   return fibArr;
// }
//
// function sumEvenOfArr(arr) {
//   let sum = 0;
//   for (let num of arr) {
//     if (num % 2 === 0) {
//       sum += num;
//     }
//   }
//   return sum;
// }
//
// console.log(sumEvenOfArr(fibonacciSequenceBelow(4000000)));
